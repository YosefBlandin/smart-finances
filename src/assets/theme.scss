/**
* Generated theme by Material Theme Generator
* https://materialtheme.arcsine.dev
* Fork at: https://materialtheme.arcsine.dev/?c=YHBhbGV0dGU$YHByaW1hcnk$YF48I2ZlY2Y0MSIsIj9lcjwjZmZmMWM2IiwiO2VyPCNmZWJkMmF$LCIlPmBePCM3OTc5NzkiLCI~ZXI8I2Q3ZDdkNyIsIjtlcjwjNWM1YzVjfiwid2Fybj5gXjwjZmYwMDAwIiwiP2VyPCNmZmIzYjMiLCI7ZXI8I2ZmMDAwMH4sIj9UZXh0PCMwMDAwMDAiLCI~PTwjZmFmYWZhIiwiO1RleHQ8I2ZmZmZmZiIsIjs9PCMyYzJjMmN$LCJmb250cz5bYEA8KC00fixgQDwoLTN$LGBAPCgtMn4sYEA8KC0xfixgQDxoZWFkbGluZX4sYEA8dGl0bGV$LGBAPHN1YiktMn4sYEA8c3ViKS0xfixgQDxib2R5LTJ$LGBAPGJvZHktMX4sYEA8YnV0dG9ufixgQDxjYXB0aW9ufixgQDxpbnB1dCIsInNpemU$bnVsbH1dLCJpY29uczxGaWxsZWQiLCI~bmVzcz5mYWxzZSwidmVyc2lvbj4xM30=
*/
@use '@angular/material' as mat;

@use 'sass:math';
@use 'sass:map';

$values: (
  50,
  100,
  200,
  300,
  400,
  500,
  600,
  700,
  800,
  900,
  A100,
  A200,
  A400,
  A700
);

@function createPalette($color) {
  $white: #fff;
  $black: #000;
  $baseDark: multiply($color, $color);

  $palette: (
    50: mix($color, $white, 12%),
    100: mix($color, $white, 30%),
    200: mix($color, $white, 50%),
    300: mix($color, $white, 70%),
    400: mix($color, $white, 85%),
    500: mix($color, $white, 100%),
    600: mix($color, $baseDark, 87%),
    700: mix($color, $baseDark, 70%),
    800: mix($color, $baseDark, 54%),
    900: mix($color, $baseDark, 25%),
    A100: lighten(saturate(mix($black, $baseDark, 15%), 80%), 65%),
    A200: lighten(saturate(mix($black, $baseDark, 15%), 80%), 55%),
    A400: lighten(saturate(mix($black, $baseDark, 15%), 100%), 45%),
    A700: lighten(saturate(mix($black, $baseDark, 15%), 100%), 40%)
  );

$contrast: (
);

@each $v in $values {
  $contrast: map.merge($contrast, ($v: getContrast(map_get($palette, $v))))
}

$palette: map.merge($palette, (contrast: $contrast));

@return $palette;
}


@function multiply($rgb1, $rgb2) {
  $r: math.floor(calc(red($rgb1) * red($rgb2) / 255));
  $g: math.floor(calc(green($rgb1) * green($rgb2) / 255));
  $b: math.floor(calc(blue($rgb1) * blue($rgb2) / 255));
  @return rgb($r, $g, $b);
}

@function getBrightness($color) {
  @return calc((red($color) * 299 + green($color) * 587 + blue($color) * 114) / 1000);
}

@function isLight($color) {
  @return getBrightness($color)>=128;
}

@function getContrast($color) {
  @if isLight($color) {
    @return #000;
  }

  @else {
    @return #fff;
  }
}

$primary-color: #ffc252;
$accent-color: #528FFF;

$primary-palette: createPalette($primary-color);
$accent-palette: createPalette($accent-color);

$primary: mat.define-palette($primary-palette, 500);
$accent: mat.define-palette($accent-palette, 700);

// Pick one
$theme: mat.define-light-theme((color: (primary: $primary,
        accent: $accent ),
      density: 0,
      typography: mat.define-typography-config()));
// $theme: mat-light-theme($primary, $accent, $warn);

@include mat.core-theme($theme);
@include mat.all-component-themes($theme);

.mat-ripple {
  overflow: hidden;
  position: relative
}

.mat-ripple:not(:empty) {
  transform: translateZ(0)
}

.mat-ripple.mat-ripple-unbounded {
  overflow: visible
}

.mat-ripple-element {
  position: absolute;
  border-radius: 50%;
  pointer-events: none;
  transition: opacity, transform 0ms cubic-bezier(0, 0, 0.2, 1);
  transform: scale3d(0, 0, 0);
  background-color: var(--mat-ripple-color, rgba(0, 0, 0, 0.1))
}

.cdk-high-contrast-active .mat-ripple-element {
  display: none
}

html {
  --mat-ripple-color: rgba(0, 0, 0, 0.1)
}

html {
  --mat-slider-ripple-color: #3f51b5;
}

html {
  --mat-text-button-ripple-color: rgba(0, 0, 0, 0.1);
  --mat-filled-button-ripple-color: rgba(0, 0, 0, 0.1);
  --mat-protected-button-ripple-color: rgba(0, 0, 0, 0.1);
  --mat-outlined-button-ripple-color: rgba(0, 0, 0, 0.1);
}